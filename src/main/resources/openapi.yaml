openapi: 3.0.3
info:
  title: Fruits Ecommerce Back-End API v1
  version: 1.0.11
servers:
  - url: http://localhost:8080/api/v1

tags:
  - name: Auth
    description: Authentication Endpoints
  - name: User
    description: All User Endpoints

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Register a new user to our platform
      operationId: registerUser
      requestBody:
        description: User to be registered
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationDto'
        required: true
      responses:
        '201':
          description: User Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user created successfully
        '400':
          description: email is already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: email is already in us
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: User login to our platform
      operationId: loginUser
      requestBody:
        description: User to be logged in
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDto'
        required: true
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: JWT_TOKEN
                  expires_in:
                    type: integer
                    example: 123456789
        '400':
          description: Invaild Credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invaild Credentials
        '404':
          description: Incorrect Credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect Credentials

  /auth/role:
    get:
      tags:
        - Auth
      summary: Find all roles
      operationId: findAllRoles

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'

        '403':
          description: Unauthorized request
    post:
      tags:
        - Auth
      summary: Bulk addition of new roles
      operationId: addNewRoles
      requestBody:
        description: Roles to be added
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RoleCreationDto'
        required: true
      responses:
        '201':
          description: successful created
            # content:
            #   application/json:
            #     schema:
            #       type: array
            #       items:
            #         $ref: '#/components/schemas/RoleDto'

        '403':
          description: Unauthorized request

  /user/{id}:
    get:
      tags:
        - User
      summary: Finds user by user id
      operationId: findUserByUserId
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

        '404':
          description: User not found

  /user/{id}/role:
    get:
      tags:
        - User
      summary: Finds user roles by user id
      operationId: findRolesByUserId
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleDto'

        '404':
          description: User not found
    post:
      tags:
        - User
      summary: Add Roles To User By User Id
      operationId: addRolesToUserByUserId
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          explode: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        description: Role Ids to be added to specific user
        content:
          application/json:
            schema:
              description: Role Ids to be added to specific user
              type: array
              items:
                type: integer
                format: int64
        required: true
      responses:
        '200':
          description: successful operation
            # content:
            #   application/json:
            #     schema:
            #       type: array
            #       items:
            #         $ref: '#/components/schemas/RoleDto'

        '404':
          description: User not found

            # /book/findByIsbn:
            #   get:
            #     tags:
            #       - Books
            #     summary: Finds book by isbn
            #     operationId: findBookByIsbn
            #     parameters:
            #       - name: isbn
            #         in: query
            #         description: Isbn value that need to be considered for filter
            #         required: true
            #         explode: true
            #         schema:
            #           type: string
            #         example: 123456
            #     responses:
            #       '200':
            #         description: successful operation
            #         content:
            #           application/json:
            #             schema:
            #               $ref: '#/components/schemas/BookDto'
            #       '400':
            #         description: Invalid isbn value

            # /book/findByPublisher:
            #   get:
            #     tags:
            #       - Books
            #     summary: Find books by publisher
            #     operationId: findBooksByPublisher
            #     parameters:
            #       - name: publisher
            #         in: query
            #         description: Publisher value that need to be considered for filter
            #         required: true
            #         explode: true
            #         schema:
            #           type: string
            #         example: CFA Inistitute
            #     responses:
            #       '200':
            #         description: successful operation
            #         content:
            #           application/json:
            #             schema:
            #               type: array
            #               items:
            #                 $ref: '#/components/schemas/BookDto'
            #       '400':
            #         description: Invalid publisher value

  # /book/{bookId}:
  #   get:
  #     tags:
  #       - Books
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: bookId
  #         in: path
  #         description: ID of book to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/BookDto'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Book not found

  #   delete:
  #     tags:
  #       - Books
  #     summary: Deletes a book
  #     description: delete a book
  #     operationId: deleteBook
  #     parameters:
  #       - name: bookId
  #         in: path
  #         description: Book id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid Book Id value

components:
  schemas:
    UserLoginDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: haysd12345+_@artsswq
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        email:
          type: string
          format: email
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleDto'
        updatedAt:
          type: string
          format: date-time

    UserCreationDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          example: haysd12345+_@artsswq
        roles:
          description: User's role Ids
          type: array
          items:
            type: integer
            format: int64

    RoleDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        type:
          type: string
          example: ROLE_VISITOR

    RoleCreationDto:
      type: object
      properties:
        type:
          type: string
          example: VISITOR